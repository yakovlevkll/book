import{_ as n,o as e,c as s,a}from"./app.edcee6da.js";const t={},i=a(`<h1 id="first-steps" tabindex="-1"><a class="header-anchor" href="#first-steps" aria-hidden="true">#</a> First steps</h1><h2 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h2><p>We can easily exclude pieces of code from execution by commenting it</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># There is one-line comment</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
There is
multi-line
comment
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another important application of comments is to leave some notes for older yourself or other coders.</p><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><p>A variable name can contain letters, numbers, or _, but can&#39;t start with a number or be one of reserved words - <code>int</code>, <code>if</code>, <code>def</code> etc. All of these words are highlighted by VS Code, Sublime text or other code editors</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>number <span class="token operator">=</span> <span class="token number">42</span>
string <span class="token operator">=</span> <span class="token string">&quot;text here&quot;</span>
boolean <span class="token operator">=</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One important concept - below two variables contains different information</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>num1 <span class="token operator">=</span> <span class="token number">23</span>
str1 <span class="token operator">=</span> <span class="token string">&#39;23&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>First is a number and we can make math operation on it (such as addition, subtraction etc.). But if we try to make such operations on second one, we will have unexpected result. We will discuss this concept later.</p><p>Multi-word variable names can be written like this</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>bigNumber <span class="token operator">=</span> <span class="token number">10000000000000</span>  <span class="token comment"># Camel case</span>
big_number <span class="token operator">=</span> <span class="token number">10000000000000</span>  <span class="token comment"># Snake case</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>How to choose good name for variable? Well, try to choose such names, that don&#39;t need comments to describe their meaning.</p><h2 id="typification" tabindex="-1"><a class="header-anchor" href="#typification" aria-hidden="true">#</a> Typification</h2><p>Python is a language with dynamic typification, so any type of data can be stored in the same variable in any time of program execution.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">type</span><span class="token punctuation">(</span>big_number<span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &lt;class &#39;int&#39;&gt; (type of data in the variable)</span>
new_int <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&#39;23&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; 23 (converts  into integer)</span>
new_float <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;42.23&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; 42.23 (converts into float number)</span>
new_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &#39;True&#39; (converts into string)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python data types are:</p><ul><li>Numbers (integers (+ booleans), floating point numbers, complex numbers)</li><li>Sequences (strings, lists, tuples, bytes, byte arrays)</li><li>Sets</li><li>Dictionaries</li></ul><h2 id="outputing-data" tabindex="-1"><a class="header-anchor" href="#outputing-data" aria-hidden="true">#</a> Outputing data</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, Python!&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; Hello, Python!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Printing several variables</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>num_1 <span class="token operator">=</span> <span class="token number">42</span>
str_1 <span class="token operator">=</span> <span class="token string">&quot;hi there&quot;</span>
bool_1 <span class="token operator">=</span> <span class="token boolean">False</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num_1<span class="token punctuation">,</span> str_1<span class="token punctuation">,</span> bool_1<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39;?|?&#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;*!*!*&#39;</span><span class="token punctuation">)</span> <span class="token comment"># &gt;&gt;&gt; 42?|?hi there?|?False*!*!*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To keep from printing newlines use <code>end=&quot;&quot;</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I don&#39;t like &quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;newlines&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reading-data" tabindex="-1"><a class="header-anchor" href="#reading-data" aria-hidden="true">#</a> Reading data</h2><p>Read date from terminal (console)</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>user_num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your number: &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>But then, if we check data type of <code>user_num</code>, we will see this</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">type</span><span class="token punctuation">(</span>user_num<span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &lt;class &#39;str&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>So, user input will always be a string. If we want to handle it like a number, we need to convert it</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>user_num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>But be careful: if user will try to enter something different from numbers, it will break your program. We will learn to handle these situations later.</p><blockquote><blockquote><p>If we need to keep program window opened after execution, we can just write <code>input()</code> in the end of our file.</p></blockquote></blockquote>`,34),o=[i];function p(l,r){return e(),s("div",null,o)}var d=n(t,[["render",p],["__file","index.html.vue"]]);export{d as default};
