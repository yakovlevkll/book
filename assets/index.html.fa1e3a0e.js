import{_ as n,o as s,c as a,a as e}from"./app.edcee6da.js";const t={},o=e(`<h1 id="conditionals" tabindex="-1"><a class="header-anchor" href="#conditionals" aria-hidden="true">#</a> Conditionals</h1><h2 id="logic-operations" tabindex="-1"><a class="header-anchor" href="#logic-operations" aria-hidden="true">#</a> Logic operations</h2><p>Every logic operation gives boolean as a result</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">5</span>
b <span class="token operator">=</span> <span class="token number">7</span>
c <span class="token operator">=</span> <span class="token number">3</span>

equal <span class="token operator">=</span> a <span class="token operator">==</span> b  <span class="token comment"># &gt;&gt;&gt; False</span>
not_equal <span class="token operator">=</span> a <span class="token operator">!=</span> b  <span class="token comment"># &gt;&gt;&gt; True (another approach is &#39;not a == b&#39;)</span>
more_than <span class="token operator">=</span> a <span class="token operator">&gt;</span> b  <span class="token comment"># &gt;&gt;&gt; False</span>
less_than <span class="token operator">=</span> a <span class="token operator">&lt;</span> b  <span class="token comment"># &gt;&gt;&gt; True</span>
more_or_equal <span class="token operator">=</span> a <span class="token operator">&gt;=</span> b  <span class="token comment"># &gt;&gt;&gt; False</span>
less_or_equal <span class="token operator">=</span> a <span class="token operator">&lt;=</span> b  <span class="token comment"># &gt;&gt;&gt; True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="block nb"><div class="title">\u0412\u0430\u0436\u043D\u043E</div><p><code>=</code> is very different from <code>==</code></p></div><p>We can chain logic operations by <code>and</code> and <code>or</code> operators. Also we can use <code>not</code> word</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>and_statement <span class="token operator">=</span> a <span class="token operator">!=</span> b <span class="token keyword">and</span> <span class="token keyword">not</span> b <span class="token operator">==</span> c
<span class="token comment"># &gt;&gt;&gt; True (5 != 7 and 7 not == 3)</span>

or_statement <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token keyword">or</span> c <span class="token operator">&lt;</span> b
<span class="token comment"># &gt;&gt;&gt; True (5 &gt; 7 or 3 &lt; 7, 3 is less than 7)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Truth tables for <code>not</code>, <code>and</code> and <code>or</code> operators are below, where 1 means <code>True</code> and 0 means <code>False</code></p><table><thead><tr><th><code>a</code></th><th><code>not a</code></th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td></tr></tbody></table><table><thead><tr><th><code>a</code></th><th><code>b</code></th><th><code>a or b</code></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><table><thead><tr><th><code>a</code></th><th><code>b</code></th><th><code>a and b</code></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><h3 id="strings" tabindex="-1"><a class="header-anchor" href="#strings" aria-hidden="true">#</a> Strings</h3><p>Comparison of strings may seem to be weird, but main principle is based on ASCII (or Unicode) code of every symbol</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token string">&quot;3A&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;31&quot;</span>  <span class="token comment"># &gt;&gt;&gt; True (letter wins)</span>
<span class="token string">&quot;12 &quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;99&quot;</span>  <span class="token comment"># &gt;&gt;&gt; True (longer wins)</span>
<span class="token string">&quot;239&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;30&quot;</span>  <span class="token comment"># &gt;&gt;&gt; True (bigger wins)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> Types</h2><p>One of the very useful checks in programming languages with dynamic typification is a type check</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token builtin">int</span> <span class="token comment"># &gt;&gt;&gt; False</span>
<span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token builtin">bool</span> <span class="token comment"># &gt;&gt;&gt; True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> If ... else</h2><p><code>if</code>, <code>else</code> and <code>elif</code> conditionals are used to perform different actions based on given statements.</p><p>The <code>if</code> conditional will execute code if statement is <code>True</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">30</span>

<span class="token keyword">if</span> age <span class="token operator">&gt;</span> <span class="token number">16</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are old enough to drive&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are not old enough to drive&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="block nb"><div class="title">\u0412\u0430\u0436\u043D\u043E</div><p>Pay attention to indentations. Whitespaces is used to group blocks of code in Python. Use the same number of proceeding spaces for every code block</p></div><p>If you want to check for multiple statements, use as much <code>elif</code>&#39;s as you need. Keep in mind that after first &quot;true&quot; statement it will stop and won&#39;t check statements that follow.</p><p>So if we write this</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">16</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are old enough to drive a car&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">&gt;=</span> <span class="token number">21</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are old enough to drive a tractor trailer&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are not old enough to drive&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>instead of this</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">21</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are old enough to drive a tractor trailer&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">&gt;=</span> <span class="token number">16</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are old enough to drive a car&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are not old enough to drive&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>it would never let user to drive a tractor trailer.</p><p>We can combine statements with <code>and</code>, <code>or</code> or <code>not</code></p><p>We can fix a program above</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">16</span> <span class="token keyword">and</span> age <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are old enough to drive a car&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">&gt;=</span> <span class="token number">21</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are old enough to drive a tractor trailer&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You are not old enough to drive&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But do we really need it?</p><h3 id="assignment" tabindex="-1"><a class="header-anchor" href="#assignment" aria-hidden="true">#</a> Assignment</h3><p>Sometimes you will face situations like this one</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    b <span class="token operator">=</span> <span class="token string">&#39;Nice&#39;</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    b <span class="token operator">=</span> <span class="token string">&#39;Sweet&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can easily rewrite it this way</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>b <span class="token operator">=</span> <span class="token string">&#39;Nice&#39;</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token string">&#39;Sweet&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This magic is called ternary operator. It&#39;s nice and short but try to not overuse it.</p>`,38),p=[o];function i(r,c){return s(),a("div",null,p)}var l=n(t,[["render",i],["__file","index.html.vue"]]);export{l as default};
