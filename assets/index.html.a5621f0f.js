import{_ as n,o as s,c as a,a as e}from"./app.edcee6da.js";const t={},o=e(`<h1 id="strings" tabindex="-1"><a class="header-anchor" href="#strings" aria-hidden="true">#</a> Strings</h1><p>String is a series of characters surrounded by <code>&#39;</code> or <code>&quot;</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>quote <span class="token operator">=</span> <span class="token string">&#39;brevity is &#39;</span>
multi_line_quote <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;the
soul of&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use a <code>&quot;</code> or <code>&#39;</code> between the same quote, escape it with <code>\\</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>hamlet_quote <span class="token operator">=</span> <span class="token string">&quot;\\&quot;To be or not to be, that is the question\\&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Or just use different quotation marks</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>hamlet_quote <span class="token operator">=</span> <span class="token string">&#39;&quot;To be or not to be, that is the question&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="formatting" tabindex="-1"><a class="header-anchor" href="#formatting" aria-hidden="true">#</a> Formatting</h2><p>Concatenation is a weird programistic word to denote glueing of word strings.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>full_quote <span class="token operator">=</span> quote <span class="token operator">+</span> multi_line_quote <span class="token operator">+</span> <span class="token string">&#39; wit&#39;</span>
<span class="token comment"># &gt;&gt;&gt; &#39;brevity is the soul of wit&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>We can obtain same result but saved in <code>quote</code> variable</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>quote <span class="token operator">+=</span> multi_line_quote <span class="token operator">+</span> <span class="token string">&#39; wit.&#39;</span>
<span class="token comment"># &gt;&gt;&gt; &#39;brevity is the soul of wit&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Tricky things</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>text <span class="token operator">=</span> <span class="token string">&#39;word&#39;</span>
text <span class="token operator">*=</span> <span class="token number">3</span>  <span class="token comment"># &gt;&gt;&gt; &#39;wordwordword&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>But when we have many strings to glue it becomes a mess. For those situations we have more powerful tool for formating in Python</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>chemistry_fact <span class="token operator">=</span> <span class="token string">&#39;Carbohydrates consist of {0}, {1}, and {oxygen}.&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> oxygen<span class="token operator">=</span><span class="token string">&#39;O&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># &gt;&gt;&gt; Carbohydrates consists of C, H, and O.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="substrings" tabindex="-1"><a class="header-anchor" href="#substrings" aria-hidden="true">#</a> Substrings</h2><p>We can pick substrings this way</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>quote <span class="token operator">=</span> <span class="token string">&#39;Brevity is the soul of wit&#39;</span>
text <span class="token operator">=</span> <span class="token string">&quot;wordwordword&quot;</span>

quote<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># &gt;&gt;&gt; &#39;r&#39; (Second letter in &#39;Brevity&#39;, start counting from 0 index)</span>
quote<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span>  <span class="token comment"># &gt;&gt;&gt; &#39;brevity&#39; (first 6 characters)</span>
quote<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># &gt;&gt;&gt; &#39;wit&#39; (last 3 characters)</span>
quote<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment"># &gt;&gt;&gt; &#39;Brevity is the soul of&#39; (everything up to the last 4 characters)</span>
new_quote <span class="token operator">=</span> <span class="token string">&quot;In the beginning was the &quot;</span> <span class="token operator">+</span> text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment"># (concatenation)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are even more tricks, read the docs.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>sample <span class="token operator">=</span> <span class="token string">&#39;abcdefghi&#39;</span>
every_third <span class="token operator">=</span> sample<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># &#39;adg&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>But we can&#39;t do such things</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>quote<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span>  <span class="token comment"># &gt;&gt;&gt; ERROR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="length" tabindex="-1"><a class="header-anchor" href="#length" aria-hidden="true">#</a> Length</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">len</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; 26 (string length)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="check-and-search" tabindex="-1"><a class="header-anchor" href="#check-and-search" aria-hidden="true">#</a> Check and search</h2><p>Simple check</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>quote <span class="token operator">=</span> <span class="token string">&#39;Brevity is the soul of wit.&#39;</span>
search <span class="token operator">=</span> <span class="token string">&#39;wit&#39;</span> <span class="token keyword">in</span> quote  <span class="token comment"># &gt;&gt;&gt; True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Finding position of one string into another (case-sensitive)</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>quote<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;wit&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; 23</span>
quote<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;Wit&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; -1 (no &#39;Wit&#39; in the quote)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Another useful check methods</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>quote<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># (True if all characters in &#39;quote&#39; are letters)</span>
quote<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># (True if there is any character and all characters are numbers)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modification" tabindex="-1"><a class="header-anchor" href="#modification" aria-hidden="true">#</a> Modification</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;what is HIP?!&quot;</span>
string<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &#39;What is hip?!&#39;</span>
string<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &#39;what is hip?!&#39;</span>
string<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &#39;WHAT IS HIP?!&#39;</span>

string<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;HIP&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;HOP&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &quot;what is HOP?!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cleaning" tabindex="-1"><a class="header-anchor" href="#cleaning" aria-hidden="true">#</a> Cleaning</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;  Ha-ha, you      &quot;</span>
string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &#39;Ha-ha, you&#39;</span>
string<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &quot;Ha-ha, you      &quot;</span>
string<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &quot;  Ha-ha, you&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unicode" tabindex="-1"><a class="header-anchor" href="#unicode" aria-hidden="true">#</a> Unicode</h2><p>At some point you may need to get byte values of a letters.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; &#39;A&#39; (character from unicode)</span>
<span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &gt;&gt;&gt; 65 (unicode of character)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="making-lists" tabindex="-1"><a class="header-anchor" href="#making-lists" aria-hidden="true">#</a> Making lists</h2><p>We can obtain list from string this way</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>quote <span class="token operator">=</span> <span class="token string">&#39;Brevity is the soul of wit.&#39;</span>
new_list <span class="token operator">=</span> quote<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
<span class="token comment"># &gt;&gt;&gt; [&#39;Brevity&#39;, &#39;is&#39;, &#39;the&#39;, &#39;soul&#39;, &#39;of&#39;, &#39;wit.&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more about lists in corresponding file.</p>`,43),i=[o];function p(c,l){return s(),a("div",null,i)}var u=n(t,[["render",p],["__file","index.html.vue"]]);export{u as default};
